@using DSLNG.PEAR.Common.Contants
@model DSLNG.PEAR.Web.ViewModels.Kpi.UpdateKpiViewModel
@{
    ViewBag.Title = "Edit KPI";
    int i = 0;
}
@section Scripts {
    <script type="text/javascript">
        $('.pillar-icon').click(function () {
            var that = $(this);
            if (that.hasClass('pillar-icon-selected')) {
                $('.pillar-icon').removeClass('pillar-icon-selected');
                $('#Icon').val('');
            } else {
                $('.pillar-icon').removeClass('pillar-icon-selected');
                that.addClass('pillar-icon-selected');
                $('#Icon').val(that.attr('data-icon').split('\\')[that.attr('data-icon').split('\\').length - 1]);
            }
        });


    </script>
}


<h2>@ViewBag.Title</h2>
@Html.Partial("_MessageResponse")
<div class="row">
    <div class="col-md-10">
        <form action="@Url.Action("Update")" method="POST" enctype="multipart/form-data">
            @Html.HiddenFor(model => model.Id)
            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label" })<span>(*)</span>
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.LevelId, new { @class = "control-label" })<span>(*)</span>
                @Html.DropDownListFor(model => model.LevelId, Model.LevelList, "Select Level", new { @class = "form-control", @onChange = "levelOnChange(this)" })
                @Html.ValidationMessageFor(model => model.LevelId)
            </div>
            <div class="form-group pillar" style="display: none">
                @Html.LabelFor(model => model.PillarId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.PillarId, Model.PillarList, "Select Pillar", new { @class = "form-control", @onChange = "pillarOnChange(this)" })
                @Html.ValidationMessageFor(model => model.PillarId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RoleGroupId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.RoleGroupId, Model.RoleGroupList, "Select Accountability", new { @class = "form-control", @onChange = "roleGroupOnChange(this)" })
                @Html.ValidationMessageFor(model => model.RoleGroupId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TypeId, new { @class = "control-label" })<span>(*)</span>
                @Html.DropDownListFor(model => model.TypeId, Model.TypeList, "Select Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.GroupId, new { @class = "control-label" })<span>(*)</span>
                @Html.DropDownListFor(model => model.GroupId, Model.GroupList, "Select Group", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GroupId)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Order, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Order, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Order)
            </div>
            @Html.LabelFor(model => model.Code, new { @class = "control-label" })<span>(*)</span>
            <div class="form-inline code-from-pillar">
                <div class="form-group">
                    @Html.TextBoxFor(model => model.CodeFromPillar, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(model => model.CodeFromLevel, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(model => model.Code, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    @Html.TextBoxFor(model => model.CodeFromRoleGroup, new { @class = "form-control", @readonly = "readonly" })
                </div>
                @Html.ValidationMessageFor(model => model.Code)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MethodId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.MethodId, Model.MethodList, "Select Method", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MethodId)
            </div>
            
            <div class="form-group">
                @Html.LabelFor(model => model.YtdFormulaValue, new { @class = "control-label" })<span>(*)</span>
                @Html.DropDownListFor(model => model.YtdFormulaValue, Model.YtdFormulaList, "Select Aggregation Formula", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.YtdFormulaValue)
            </div>
            
            <div class="form-group custom-formula">
                @if (Model.MethodId == 1)
                {
                    @Html.LabelFor(model => model.CustomFormula, new { @class = "control-label" })<span>(*)</span>
                    @Html.TextBoxFor(model => model.CustomFormula, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CustomFormula)
                }
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsEconomic, new { @class = "control-label" })
                @Html.EditorFor(model => model.IsEconomic, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsEconomic)
            </div>
            <div class="form-group" style="margin-left: 10px;">
                <a class="btn btn-flat btn-lightblue" data-toggle="modal" data-target="#modalDialog">Upload New Icon</a>
            </div>
            <div class="form-group" style="display: inline-block">
                @Html.HiddenFor(model => model.Icon)
                @foreach (var item in Model.Icons)
                {
                    var icon = item.Split('\\')[item.Split('\\').Length - 1];
                    var selected = "";
                    if (icon == Model.Icon)
                    {
                        selected = "pillar-icon-selected";
                    }
                    <div class="pillar-icon @selected" data-icon="@item">
                        <img style="margin:0 auto;display: block" src="@Url.Content(PathConstant.KpiPath)/@icon"/>
                        @*<span style="font-size: 11px; color: #ffffff">@icon</span>*@
                    </div>
                    
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.MeasurementId, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.MeasurementId, Model.MeasurementList, "Select Measurement", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MeasurementId)
            </div>
            <div class="form-group form-list">
                <label>Relation Model</label>
                <button type="button" class="btn btn-default form-inline add-relation-model"><i class="glyphicon glyphicon-plus"></i></button>
            </div>
            <div class="relation-model-wrapper">
                @foreach (var rm in Model.RelationModels)
                {
                    <div class="form-inline relation-model-list">
                        <input type="hidden" name="RelationModels.Index" value="@i" />
                        <input type="hidden" name="RelationModels[@i].Id" value="@rm.Id" class="rm-id"/>
                        <div class="form-group">
                            <select name="RelationModels[@i].KpiId" class="form-control rm-kpi">
                                <option value="0">Select KPI</option>
                                @foreach (var item in Model.KpiList)
                                {
                                    var selected = item.Value == rm.KpiId.ToString() ? "selected = 'selected'" : "";
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <select name="RelationModels[@i].Method" class="form-control rm-method">
                                <option value="0">Select Method</option>
                                @foreach (var method in rm.Methods)
                                {
                                    var selected = method.Value == rm.Method.ToString() ? "selected = 'selected'" : "";
                                    <option value="@method.Value" @selected>@method.Text</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-default form-control remove-relation-model" style="display: inline-block;"><i class="glyphicon glyphicon-minus"></i></button>

                        </div>
                    </div>
                                i++;
                }
            </div>
            <span id="counter" data-relation-model="@i"></span><span>(*)</span>
            <div class="form-group">
                @Html.LabelFor(model => model.PeriodeValue, new { @class = "control-label" })
                @Html.DropDownListFor(model => model.PeriodeValue, Model.PeriodeList, "Select Period Input", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PeriodeValue)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Remark, new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Remark)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsActive, new { @class = "control-label" })
                @Html.EditorFor(model => model.IsActive, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IsActive)
            </div>

            <button type="submit" class="btn btn-default">Submit</button>
            <a href="@Url.Action("Index")" class="btn btn-default">Cancel</a>

        </form>
    </div>
</div>

@Html.Partial("_Upload", Model.Upload)

<script>
    $(document).ready(function () {
        var i = $('#counter').attr('data-relation-model');
        i = parseInt(i) === NaN ? 0 : parseInt(i);

        $('.add-relation-model').click(function () {
            var clone = $('.relation-model-list:last').clone(true);
            clone.find('input[name="RelationModels.Index"]').val(i);
            clone.find('.rm-id').attr('name', 'RelationModels[' + i + '].Id').attr('value', 0);;
            clone.find('.rm-kpi').attr('name', 'RelationModels[' + i + '].KpiId');
            clone.find('.rm-method').attr('name', 'RelationModels[' + i + '].Method');
            clone.appendTo('.relation-model-wrapper').show();
            if (i > 0) {
                $('.remove-relation-model').show();
            }
            i++;
        });

        if (i <= 1) {
            $('.remove-relation-model').hide();
        }

        $('.remove-relation-model').click(function () {
            i--;
            $(this).parent().parent().remove();
            if (i == 1) {
                $('.remove-relation-model').hide();
            }
        });

        $('#MethodId').change(function () {
            $this = $(this);
            var value = $this.val();
            if (value == 1) {
                var input = '<label class="control-label" for="custom-formula">Custom Formula (*)</label>'
                input += '<input type="text" class="form-control" name="CustomFormula" value="@Model.CustomFormula"/>'
                $('.custom-formula').append(input);
            }
            else {
                $('.custom-formula').empty();
            }
        });

    })

    function levelOnChange(val) {
        var levelId = $(val).val();
        $.ajax({
            url: '@Url.Action("GetLevelCode")',
            data: { id: levelId },
            type: 'GET',
            success: function (data) {
                $("input[name=CodeFromLevel]").val(data);
            }
        });
        var selectedText = $(val).find("option:selected").text();
        if (selectedText == "Corporate") {
            $(".pillar").show();
        }
        else {
            $(".pillar").hide();
            $(".pillar").val(null);
        }
    }

    function pillarOnChange(val) {
        var pillarId = $(val).val();
        $.ajax({
            url: '@Url.Action("GetPillarCode")',
            data: { id: pillarId },
            type: 'GET',
            success: function (data) {
                $("input[name=CodeFromPillar]").val(data);
            }
        });
    }

    function roleGroupOnChange(val) {
        var roleId = $(val).val();
        $.ajax({
            url: '@Url.Action("GetRoleGroupCode")',
            data: { id: roleId },
            type: 'GET',
            success: function (data) {
                $("input[name=CodeFromRoleGroup]").val(data);
            }
        });
    }

    $('#Order').keyup(function () {
        var val = $(this).val();
        if (val.length == 1) {
            $('#Code').val('00' + val);
        }
        else if (val.length == 2) {
            $('#Code').val('0' + val);
        } else if (val.length == 3) {
            $('#Code').val(val);
        } else if (val.length > 3) {
            alert('Error, KPI Order should be less than 3 digit');
        }
    });
</script>
