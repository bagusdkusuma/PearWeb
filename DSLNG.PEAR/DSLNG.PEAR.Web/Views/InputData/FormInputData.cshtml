@model DSLNG.PEAR.Web.ViewModels.InputData.FormInputDataViewModel
@using DSLNG.PEAR.Web.ViewModels.DerTransaction;
@helper InputDataDate(int addedTime)
{
string date = string.Empty;
string format = string.Empty;
string d = string.Empty;
switch (Model.PeriodeType.ToString())
{
    case "Yearly":
        format = "yyyy";
        date = Request.QueryString["date"] != null ? Request.QueryString["date"] : DateTime.Now.ToString(format);
        d = DateTime.ParseExact(date, format, System.Globalization.CultureInfo.InvariantCulture).AddYears(addedTime).ToString(format);
        break;
    case "Monthly":
        format = "MM/yyyy";
        date = Request.QueryString["date"] != null ? Request.QueryString["date"] : DateTime.Now.ToString(format);
        d = DateTime.ParseExact(date, format, System.Globalization.CultureInfo.InvariantCulture).AddMonths(addedTime).ToString(format);
        break;
    default:
        format = "MM/dd/yyyy";
        date = Request.QueryString["date"] != null ? Request.QueryString["date"] : DateTime.Now.ToString(format); 
        d = DateTime.ParseExact(date, format, System.Globalization.CultureInfo.InvariantCulture).AddDays(addedTime).ToString(format);
        break;
}
    @Url.Action("FormInputData", "inputdata", new { date = d, id = Model.Id });
}
<h3>@ViewBag.Title</h3>
&nbsp;
<div class="row">
    <div class="col-sm-12">
        <form class="form-inline">
            <div class="form-group form-list">
                <font color="#FFFFFF">Date : </font>
                <a class="der-yesterday" href="@InputDataDate(-1)">
                    <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                </a>
                <input id="currentDate" class="form-control datepicker" type="text">
                <span class="field-validation-valid" data-valmsg-for="StartInDisplay" data-valmsg-replace="true"></span>
                <a class="der-tomorrow" href="@InputDataDate(1)"><span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span></a>
            </div>
        </form>
    </div>
</div>
<table class="table table-transparent table-bordered table-form-input-data">
    <thead>
        <tr style="border-bottom:1px solid #fff">
            <td>Group Name</td>
            <td>KPI</td>
            @*<td>@Model.Date.AddDays(-1).ToString("d MMMM yyyy")</td>*@
            @switch (Model.PeriodeType.ToString())
            {
                case "Yearly":
                    <td>@Model.Date.ToString("yyyy")</td>
                    break;
                case "Monthly":
                    <td>@Model.Date.ToString("MMMM yyyy")</td>
                    break;
                default:
                    <td>@Model.Date.ToString("d MMMM yyyy")</td>
                    break;
            }
            @*<td>@Model.Date.ToString("d MMMM yyyy")</td>*@
        </tr>
    </thead>
    <tbody>
        @{
            var tabIndex = 0;
        }
        @foreach (var item in Model.GroupInputDatas.OrderBy(x => x.Order))
        {
            <tr style="border-bottom:none; border-right:1px solid #fff">
                <td style="text-align:left"><span style="font-weight:bold">@item.Name</span></td>
                <td colspan="3"></td>
            </tr>

            foreach (var kpi in item.InputDataKpiAndOrders.OrderBy(x => x.Order))
            {
                tabIndex++;
                <tr>
                    <td></td>
                    <td style="text-align:left">@kpi.KpiName (@kpi.KpiMeasurement)</td>
                    <td style="border-right:1px solid #fff">
                        @Html.DisplayKpiInformationInput(Model.KpiInformationValues, kpi.KpiId, tabIndex, kpi.KpiMeasurement, "prev", string.Format(@"{0}-actual", Model.PeriodeType.ToLowerInvariant()))
                    </td>
                    @*<td><input type="text" /></td>*@
                </tr>
            }

        }
    </tbody>
</table>

<a href="@Url.Action("Index")">Back</a>
<div id="format-input-data" data-periode-type="@Model.PeriodeType.ToLowerInvariant()"></div>

@section Scripts {
    <script type="text/javascript">
        function getQueryVariable(variable) {
                    var query = window.location.search.substring(1);
                    var vars = query.split('&');
                    for (var i = 0; i < vars.length; i++) {
                        var pair = vars[i].split('=');
                        if (decodeURIComponent(pair[0]) == variable) {
                            return decodeURIComponent(pair[1]);
                        }
                    }
                    return null;
                }
                function updateQueryStringParameter(uri, key, value) {
                    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
                    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                    if (uri.match(re)) {
                        return uri.replace(re, '$1' + key + "=" + value + '$2');
                    }
                    else {
                        return uri + separator + key + "=" + value;
                    }
                }

        var reloadView = function () {
            window.document.location = updateQueryStringParameter(window.location.href, "date", encodeURIComponent($('.datepicker').val()));
        };

        $(document).ready(function () {
            var dateFormat = 'MM/DD/YYYY';
            var periodeType = $('#format-input-data').data('periode-type');
            var existedDate = "@DateTime.Now.ToString("MM/dd/yyyy")";
            switch (periodeType) {
                case "yearly":
                    dateFormat = 'YYYY';
                    existedDate = "@DateTime.Now.ToString("yyyy")";
                    break;
                case "monthly":
                    existedDate = "@DateTime.Now.ToString("MM/yyyy")";
                    dateFormat = 'MM/YYYY';
                    break;
            }
            var date = getQueryVariable('date');
            if (date == null) {
                $('.datepicker').val(existedDate);
            } else {
                $('.datepicker').val(decodeURIComponent(date));
            }
            $('.datepicker').datetimepicker({
                format: dateFormat,
                focusOnShow: false
            }).on('dp.change', function (e) {
                $(".datepicker").blur();
                reloadView();
            });
            var currentDate = $('.datepicker').val();

            $('input.der-kpi').blur(function (e) {
                var toConvert = eval($(this).val().replace(/,/g, ''));
                if (!isNaN(toConvert)) {
                    $(this).val(toConvert.toLocaleString('en-EN', { maximumSignificantDigits: 21 }));
                }
            });

            $('input.der-kpi').keyup(function (e) {
                var $this = $(this);
                if (e.keyCode == 13) {
                    var splitDate = currentDate.split('/');
                    console.log(splitDate);
                    if (splitDate.length == 1) {
                        currentDate = "01/01/" + splitDate[0];
                    } else if (splitDate.length == 2) {
                        currentDate = splitDate[0] + "/01/" + splitDate[1];
                    }
                    console.log(currentDate);
                    var kpiId = $this.data('kpi-id');
                    var type = $this.data('type');
                    var tabindex = $this.attr('tabindex');
                    var nextTabindex = parseInt(tabindex) + 1;
                    var id = $this.attr('data-id');
                    var value = $this.val();
                    var toConvert = eval($(this).val().replace(/,/g, ''));
                    var valueType = $this.data('value-type');
                    $this.addClass('in-progress');
                    $.post("/dertransaction/updatekpi", { kpiId: kpiId, type: type, date: currentDate, id: id, value: value, valueType: valueType }, function (resp) {
                        var $next = $('[tabindex=' + nextTabindex + ']');
                        if ($next.is("textarea")) {
                            tinyMCE.get($next.attr('id')).focus()
                        } else {
                            $next.focus();
                        }

                        $this.removeClass('in-progress');
                        if ($this.hasClass('der-value-prev')) {
                            $this.removeClass('der-value-prev');
                        }
                        if ($this.hasClass('der-value-empty')) {
                            $this.removeClass('der-value-empty');
                        }
                        $this.addClass('der-value-now');
                        $this.val(toConvert.toLocaleString('en-EN', { maximumSignificantDigits: 21 }));
                        console.log('gue kepanggil gak sih?');
                        if (parseInt($this.data('id')) == 0) {
                            $this.attr('data-id', resp.Id);
                        }
                    })

                }
            });
            $('input.der-kpi').focus(function (e) {
                if ($(this).hasClass('der-value-prev')) {
                    $(this).select();
                }
            });
        });
    </script>
}
