@model IList<DSLNG.PEAR.Web.ViewModels.Common.PmsSummary.ScoreIndicatorViewModel>
@{
    int i = 0;
}
<style>
    .colpick {
  z-index: 9999;
}
</style>
<div class="form-group form-list form-inline">
    <label>Scoring Indicator</label>
    <button type="button" class="btn btn-default form-inline add-score-indicator"><i class="glyphicon glyphicon-plus"></i></button>
</div>

<div class="score-indicator-wrapper">
    @foreach (var item in Model)
    {
        <div class="row hidden-scoring-indicator" style="margin-bottom: 10px;">
            <div class="col-sm-12 form-inline">
                <input type="hidden" name="ScoreIndicators.Index" value="@i" />
                <input class="form-control si-id" type="hidden" name="ScoreIndicators[@i].Id" value="@item.Id" style="width:50px;" />
                <input class="form-control si-expression" name="ScoreIndicators[@i].Expression" placeholder="Expression, e.g : x > 20" type="text" value="@item.Expression" style="width:200px;">
                <div class="input-group colorpicker">
                    <input class="form-control si-color" name="ScoreIndicators[@i].Color" placeholder="Color" type="text" value="@item.Color" style="width:150px;">
                    <span class="input-group-addon"><i style="background-color: @item.Color"></i></span>
                </div>
                @*@Html.TextBoxFor(x => Model[i].Expression, new { @class = "form-control", placeholder = "Expression" })
                @Html.TextBoxFor(x => Model[i].Color, new { @class = "form-control", placeholder = "Color" })*@
                <button type="button" class="btn btn-default form-control remove-score-indicator" style="display: inline-block;"><i class="glyphicon glyphicon-minus"></i></button>
            </div>
        </div>
        <div class="clearfix"></div>
        i++;
    }
</div>
<span id="counter" data-score-indicator="@i"></span>

<script type="text/javascript">
    $(document).ready(function () {
        var i = $('#counter').attr('data-score-indicator');
        i = parseInt(i) === NaN ? 0 : parseInt(i);
        $('.add-score-indicator').click(function () {
            var clone = $('.hidden-scoring-indicator:last').clone(true);
            clone.find('input[name="ScoreIndicators.Index"]').val(i);
            clone.find('.si-id').attr('name', 'ScoreIndicators[' + i + '].Id').attr('value', 0);
            clone.find('.si-expression').attr('name', 'ScoreIndicators[' + i + '].Expression').val('');
            clone.find('.si-color').attr('name', 'ScoreIndicators[' + i + '].Color').val('');
            clone.appendTo('.score-indicator-wrapper').show();
            clone.find(".colorpicker").each(function (i, val) {
                var $input = $(val).find('input').clone();
                $input.removeClass('valid');
                $(val).find('input').replaceWith($input);
                $(val).find('i').removeAttr('style');
                $(val).find('input').colpick({
                    submit: 0,
                    onChange: function (hsb, hex, rgb, el, bySetColor) {
                        $(val).closest('.colorpicker').find('i').css('background-color', '#' + hex);
                        if (!bySetColor) $(el).val('#' + hex);
                    }
                }).keyup(function () {
                    console.log($(this));
                    console.log(this);
                    $(this).colpickSetColor(this.value.replace('#', ''));
                });
            });
            
            if (i > 0) {
                $('.remove-score-indicator').show();
            }
            i++;
        });
        
        if (i <= 1) {
            $('.remove-score-indicator').hide();
        }
        $('.remove-score-indicator').click(function () {
            i--;
            $(this).parent().parent().remove();
            if (i == 1) {
                $('.remove-score-indicator').hide();
            }
        });

        $('.colorpicker').each(function (i, val) {
            $(val).find('.si-color').colpick({
                submit: 0,
                onChange: function (hsb, hex, rgb, el, bySetColor) {
                    $(val).closest('.colorpicker').find('i').css('background-color', '#' + hex);
                    if (!bySetColor) $(el).val('#' + hex);
                }
            }).keyup(function () {
                $(this).colpickSetColor(this.value.replace('#', ''));
            });
        });

        $('.score-indicator-wrapper').on('change', '.si-expression', function () {
            //$('#Target').html('');
            //$('#Target')
            var arr = [];
            $('.si-expression').each(function (idx, v) {
                var val = $(v).val();
                arr.push(val);
                //$('#Target').append('<option value="' + val + '">' + val + '</option>');
            });

            var options = [];
            $('#Target option').each(function () {
                var option = $(this).val();
                if ($.inArray(option, arr) == -1) {
                    $(this).remove();
                } else {
                    options.push(option);
                }
            });
            
            for (var index in arr) {
                if (options.indexOf(arr[index]) == -1) {
                    $('#Target').append('<option value="' + arr[index] + '">' + arr[index] + '</option>');
                }
            }
            //console.log('asas');
        });
    })
</script>

